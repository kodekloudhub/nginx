# nginx.conf
# This a somewhat minimalist nginx configuration, but it has more
# documentation than usual, for teaching purposes.

# When OS starts the nginx, it has root priveges.  It has to if it
# is going to listen to a TCP port less 1024, including 80 for HTTP
# and 443 for HTTPS.  Back in the days when a computer was pricy and
# only highly trained sysadmins ran them, this limitation made sense.
# Today, any smart aleck kid from Elbonia who has a raspberry pi can be
# a sysadmin so limitation is no longer useful but we are stuck with
# it so nginx starts as root and then does a setuid(2) system service
# call to become the user specified in the user directive
user nginx;

# See  https://nginx.org/en/docs/ngx_core_module.html#worker_processes
worker_processes auto;

# nginx has to record the process identifier (PID).  This file gets
# modified all the time, but if it gets corrupted, then you will have
# to stop nginx "by hand" using the kill or killall commands.
pid /run/nginx.pid;



events {
	# See my module 3 nginx configuration for more discussion.
	# If I frequently copy and paste the events section, then it should be an include
        worker_connections 768;
        
        # http://serverfault.com/questions/763597/ddg#763887 has a good answer
        # as to why this shold be off
        multi_accept off;
}


http {
    include /etc/nginx/mime.types;		# Default mime types - do not modify
    include /etc/nginx/my_mime.types;		# My mime types.  Since I have a lot of python, TSV, CSV and CONF files, I want them rendered as text
    
    log_format  main  '$time_iso8601 $remote_addr -  "$request" |||| "$request_filename" $request_body |$status|'  ;
#
# See https://freenginx.org/en/docs/http/ngx_http_core_module.html#var_document_root
# $request full original request line
# $request_filename	file path for the current request, based on the root or alias directives, and the request URI (helpful in tracking down 404 errors)
# $args A list of arguments
# $request_body
# Some variables that I might use in the future are:
# $remote_user  nginx can keep track of who is logged in
# $body_bytes_sent	how big (in bytes) was the body of the return
# $http_user_agent	What software is the client using: chrome, edge, bing, python, etc.
# $http_x_forwarded_for	The original IP address before it was proxied
# $http_referer		The website that refered the user to us.

    
    server {
          listen 80;			# IPv4 port 80, any remote address
          listen [::]:80;		# IPv6 port 80, any remote address (this is the official representation)
          server_name _;		# A generic, wildcard name
          # Use "lm_app" format to get username in nginx.log (see nginx-lmlog.conf)
          access_log /var/log/nginx/access.log main;	# This is for the web server.  The API software will have its own log file.


	  location /api/items {		# any URL that has /api/items will go to the proxy, the API.
          	proxy_pass http://127.0.0.1:5000;
          }
          # Flask can be a straight HTTP proxy or a WSGI HTTP proxy
	  location /api/wsgi/items {		# any URL that has /api/wsgi/items will go to the uwsgi_proxy, the API.
          	uwsgi_pass 127.0.0.1:5001;	# WSGI does not use HTTP, so do *not* put HTTP in the hostname string
          	include uwsgi_params;
          }

          
          location / {				# Every URL must have a slash, so this will match any URL.  It is also
          					# the shortest pattern, so any other pattern will be longer and nginx
          					# will evaluate that pattern first.
	          root /var/www/html;		# The documentation says root is faster than alias
	          				# Alias will take a regex, root will not, so
	          				# the documentation is probably right.
	          index index.html index.htm;	# If no file is specified, just a directory, then
	          				# use one of these files as the index if they exist
	          autoindex on;			# If no file is specified, just a directory, and there
	          				# is index file, then generate an index automatically.
	          
          }
        }
}
