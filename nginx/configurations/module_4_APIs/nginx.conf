# nginx.conf 
# This a somewhat minimalist nginx configuration, but it has more
# documentation than usual, for teaching purposes.

# When OS starts the nginx, it has root priveges.  It has to if it
# is going to listen to a TCP port less 1024, including 80 for HTTP
# and 443 for HTTPS.  Back in the days when a computer was pricy and
# only highly trained sysadmins ran them, this limitation made sense.
# Today, any smart aleck kid from Elbonia and a raspberry pi can be
# a sysadmin so limitation is no longer useful but we're stuck with
# it so nginx starts as root and then does a setuid system service
# call to become the user specified in the user directive
user nginx;

# See  https://nginx.org/en/docs/ngx_core_module.html#worker_processes
worker_processes auto;

# nginx has to record the process identifier (PID).  This file gets
# modified all the time, but if it gets corrupted, then you will have
# to stop nginx "by hand" using the kill or killall commands.
pid /run/nginx.pid;

# These configuration files pull in any additional modules not in the
# static build and also configuration information about those modules.
include /etc/nginx/modules-enabled/*.conf;

events {
	# Sets the maximum number of simultaneous connections that can be opened by a worker process.
	# Every process can open only so many connections before it runs out of kernal space
	# RAM.  So you want to keep the number of connections low.  But make it too low and the
	# you'll run out connections per process or you will run out of worker processes  You'll
	# just have to experiment.  IMPORTANT POINT: This is an **optimization**.  Get your
	# working first, measure its performance, and then start optimizing!
	worker_connections 768;
	
	# http://serverfault.com/questions/763597/ddg#763887 has a good answer
	# as to why this shold be off
	multi_accept off;
}

http {
	##
	# Logging Settings
	##

	# This is the format I want for my access log file.  If I was in a national or
	# international corporation, I'd probably change $time_local to GMT by setting
	# the TZ envar to UTC in the script or Dockerfile used to start nginx
	log_format  main  '$remote_addr - $remote_user [$time_iso8601] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

	access_log /var/log/nginx/access.log	main;
	error_log /var/log/nginx/error.log;



	##
	# Basic Settings
	##

	sendfile on;
	tcp_nopush on;
	types_hash_max_size 2048;
	# server_tokens off;

	# server_names_hash_bucket_size 64;
	# server_name_in_redirect off;

	include /etc/nginx/mime.types;		# Default mime types - do not modify!
	include /etc/nginx/my_mime.types;	# My mime types
	default_type application/octet-stream;	# If nginx can't figure out what the file type is, delegate to the client

	##
	# SSL Settings
	##

	# This is redundant with etc/letsencrypt/options-ssl-nginx.conf which might generate a warning
	# ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3; # Dropping SSLv3, ref: POODLE
	# ssl_prefer_server_ciphers is also in /etc/letsencrypt/options-ssl-nginx.conf
        # ssl_prefer_server_ciphers on;


	##
	# Gzip Settings
	##

	gzip on;

	# gzip_vary on;
	# gzip_proxied any;
	# gzip_comp_level 6;
	# gzip_buffers 16 8k;
	# gzip_http_version 1.1;
	# gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

	##
	# Virtual Host Configs
	##

	# root /var/www
	# Static content goes in /var/www/html
	# Flask URLs go to /var/www/flask
	# etc

	include /etc/nginx/conf.d/*.conf;
	include /etc/nginx/sites-enabled/*;

	# Each TCP connection has control block maintained by the kernel.  Kernel memory
	# is a precious resource.  This setting sets a timer.  When the timer expires,
	# the TCP connection is closed on the server side.
	# https://nginx.org/en/docs/http/ngx_http_core_module.html#keepalive_timeout
	keepalive_timeout  65;

	error_page  404              /404.html;
	error_page   500 502 503 504  /50x.html;

}

    
